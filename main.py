import asyncio
import logging
import os
from typing import Any

import aioschedule
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

import message_text
from keyboards import keyboards_client
from MongoData import (
    create_user,
    delete_user,
    get_all_users,
    get_user,
    show_user,
    start_mongodb,
)
from parser_status import get_data_parser

load_dotenv()

storage = MemoryStorage()

bot = Bot(os.getenv('BOT_TOKEN'))

dp = Dispatcher(bot, storage=storage)


class AddUsers(StatesGroup):
    record_number = State()
    pin_number = State()


async def on_startup(_: Any) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB,
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    """
    await bot.set_webhook(os.getenv('WEBHOOK_URL'))
    logging.warning('–ë–æ—Ç –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É')
    await start_mongodb()
    schedule_task = asyncio.create_task(scheduler())
    logging.warning(f'–ó–∞–ø—É—Å–∫ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ {schedule_task.get_name()}')


async def on_shutdown(_: Any) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞.
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞, –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.
    """
    await bot.delete_webhook()


async def scheduler_auto_status():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫.

    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
    –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
    —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞—è–≤–∫–∏.
    """
    users = await get_all_users()
    if users:
        for user in users:
            data = await get_data_parser(req_num=user['reqNum'], pin=user['pin'])

            await bot.send_message(
                user['user_id'],
                text=f'üáßüá¨–î–æ–±—Ä—ã–π –¥–µ–Ω—å, '
                f'*{user["username"]}*\\!\n'
                f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ '
                f'–ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {user["reqNum"]}'
                f'\n\n`{data["answer"].upper()}`\n\n'
                f'{data["time_answer"]}üìÖ',
                parse_mode="MarkdownV2",
            )

        return
    logging.warning('–í –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')


async def scheduler():
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é scheduler_auto_status
    –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00.
    """
    aioschedule.every(1).days.at('12:00').do(scheduler_auto_status)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


@dp.message_handler(commands=['start'])
async def process_help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await bot.send_message(
        message.from_user.id,
        text=message_text.message_start['start'],
        reply_markup=keyboards_client,
    )


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    await bot.send_message(
        message.from_user.id,
        text=message_text.message_help['help'],
        reply_markup=keyboards_client,
    )


@dp.message_handler(commands=['add'], state=None)
async def process_add_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (FSMContext)
    –∞ —Ç–∞–∫ –∂–µ, –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    instance = await get_user(message.from_user)
    if instance:
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã')
        return

    await AddUsers.record_number.set()
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ö–æ–¥—è—â–µ–π –∑–∞—è–≤–∫–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è '
        '–≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–Ω–æ–º–µ—Ä/–≥–æ–¥¬ª. –ü—Ä–∏–º–µ—Ä: ¬´123/2016¬ª.\n'
        '\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )


@dp.message_handler(commands=['cancel'], state='*')
async def process_cancel(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel.

    –í –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–ö')


@dp.message_handler(
    lambda message: '/' not in message.text
    or not all(part.isdigit() for part in message.text.split('/')),
    state=AddUsers.record_number,
)
async def process_invalid_number(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.reply('–ü—Ä–∏–º–µ—Ä: ¬´123/2016¬ª')


@dp.message_handler(state=AddUsers.record_number)
async def process_add_number(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
    """
    async with state.proxy() as data:
        data['reqNum'] = message.text

    await AddUsers.next()
    await message.answer(
        '–ü–ò–ù-–∫–æ–¥ –≤–≤–æ–¥–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏'
        ' –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–π–∫–µ –≤ –î–∏—Ä–µ–∫—Ü–∏–∏.\n'
        '\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )
    await AddUsers.pin_number.set()


@dp.message_handler(
    lambda message: not message.text.isdigit(), state=AddUsers.pin_number
)
async def process_invalid_pin(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ü–ò–ù-–∫–æ–¥–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')


@dp.message_handler(state=AddUsers.pin_number)
async def process_add_pin(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ü–ò–ù-–∫–æ–¥–∞.
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
    """
    async with state.proxy() as data:
        data['pin'] = message.text

    await create_user(state, message.from_user)
    await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')

    await state.finish()


@dp.message_handler(commands=['check'])
async def process_check_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    –∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = await get_user(message.from_user)
    if not user:
        await bot.send_message(
            message.from_user.id,
            text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ' '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ',
        )
        return

    data = await get_data_parser(req_num=user['reqNum'], pin=user['pin'])
    await bot.send_message(
        message.from_user.id,
        text=f'üáßüá¨–î–æ–±—Ä—ã–π –¥–µ–Ω—å, *{user["username"]}*\\!\n'
        f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {user["reqNum"]}'
        f'\n\n`{data["answer"].upper()}`\n\n'
        f'{data["time_answer"]}',
        parse_mode="MarkdownV2",
    )


@dp.message_handler(commands=['show'])
async def process_show_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /show.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_data = await show_user(user=message.from_user)
    if user_data:
        user = user_data[0]
        await bot.send_message(
            message.from_user.id,
            text=f'–í–∞—à ID: {user["user_id"]}\n'
            f'Username: {user["username"]}\n'
            f'–ù–æ–º–µ—Ä –ó–∞—è–≤–ª–µ–Ω–∏—è: {user["reqNum"]}\n'
            f'–ü–∏–Ω-–ö–æ–¥: {user["pin"]}',
        )

        return
    await bot.send_message(
        message.from_user.id, text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å'
    )


@dp.message_handler(commands=['delete'])
async def process_delete_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete.
    –£–¥–∞–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = message.from_user
    user_data = await delete_user(user=user)
    if user_data.deleted_count == 1:
        await bot.send_message(
            message.from_user.id,
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' f'{user.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
        )

        return
    await bot.send_message(
        message.from_user.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' f'{user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω'
    )


@dp.message_handler()
async def process_unknown_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å
    –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞')
    await message.delete()


if __name__ == '__main__':
    executor.start_webhook(
        dispatcher=dp,
        webhook_path='',
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        hoost="0.0.0.0",
        port=int(os.getenv('PORT', 5000)),
    )
