import asyncio
import logging
import os
from typing import Any

import aioschedule
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

from keyboards import keyboards_client
from MongoData import (create_user, delete_user, get_all_users, get_user,
                       show_user, start_mongodb)
from parser_status import get_data_parser

load_dotenv()

storage = MemoryStorage()

bot = Bot(os.getenv('BOT_TOKEN'))

dp = Dispatcher(bot, storage=storage)


class AddUsers(StatesGroup):
    record_number = State()
    pin_number = State()


async def on_startup(_: Any) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    Schedule_task –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é scheduler
    —Ñ—É–Ω–∫—Ü–∏—è scheduler –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤
    –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–º —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
    """
    logging.warning('–ë–æ—Ç –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É')
    await start_mongodb()
    schedule_task = asyncio.create_task(scheduler())
    logging.warning(f'–ó–∞–ø—É—Å–∫ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ {schedule_task.get_name()}')


async def scheduler_auto_status():
    users = await get_all_users()
    if users:
        for user in users:
            data = await get_data_parser(
                req_num=user['reqNum'], pin=user['pin'])

            await bot.send_message(user['user_id'],
                                   text=f'üáßüá¨–î–æ–±—Ä—ã–π –¥–µ–Ω—å, '
                                        f'*{user["username"]}*\\!\n'
                                        f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ '
                                        f'–ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {user["reqNum"]}'
                                        f'\n\n`{data["answer"].upper()}`\n\n'
                                        f'{data["date_answer"]}üìÖ',
                                   parse_mode="MarkdownV2")

        return
    logging.warning('–í –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')


async def scheduler():
    aioschedule.every(1).days.at('12:00').do(scheduler_auto_status)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


@dp.message_handler(commands=['start', 'help'])
async def process_help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await bot.send_message(
        message.from_user.id,
        text='–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞',
        reply_markup=keyboards_client)


@dp.message_handler(commands=['add'], state=None)
async def process_add_command(message: types.Message):
    instance = await get_user(message.from_user)
    if instance:
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã')
        return

    await AddUsers.record_number.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ö–æ–¥—è—â–µ–π –∑–∞—è–≤–∫–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è '
                         '–≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–Ω–æ–º–µ—Ä/–≥–æ–¥¬ª. –ü—Ä–∏–º–µ—Ä: ¬´123/2016¬ª.\n'
                         '\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')


@dp.message_handler(commands=['cancel'], state='*')
async def process_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–ö')


@dp.message_handler(lambda message: '/' not in message.text or not all(
    part.isdigit() for part in message.text.split('/')),
                    state=AddUsers.record_number)
async def process_invalid_number(message: types.Message):
    await message.reply('–ü—Ä–∏–º–µ—Ä: ¬´123/2016¬ª')


@dp.message_handler(state=AddUsers.record_number)
async def process_add_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['reqNum'] = message.text

    await AddUsers.next()
    await message.answer('–ü–ò–ù-–∫–æ–¥ –≤–≤–æ–¥–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏'
                         ' –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–π–∫–µ –≤ –î–∏—Ä–µ–∫—Ü–∏–∏.\n'
                         '\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')
    await AddUsers.pin_number.set()


@dp.message_handler(lambda message: not message.text.isdigit(),
                    state=AddUsers.pin_number)
async def process_invalid_pin(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')


@dp.message_handler(state=AddUsers.pin_number)
async def process_add_pin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pin'] = message.text

    await create_user(state, message.from_user)
    await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')

    await state.finish()


@dp.message_handler(commands=['check'])
async def process_check_command(message: types.Message):
    user = await get_user(message.from_user)
    if not user:
        await bot.send_message(message.from_user.id,
                               text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö '
                                    '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ')
        return

    data = await get_data_parser(req_num=user['reqNum'], pin=user['pin'])
    await bot.send_message(message.from_user.id,
                           text=f'üáßüá¨–î–æ–±—Ä—ã–π –¥–µ–Ω—å, *{user["username"]}*\\!\n'
                                f'–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {user["reqNum"]}'
                                f'\n\n`{data["answer"].upper()}`\n\n'
                                f'{data["date_answer"]}üìÖ',
                           parse_mode="MarkdownV2")


@dp.message_handler(commands=['show'])
async def process_show_command(message: types.Message):
    user_data = await show_user(user=message.from_user)
    if user_data:
        user = user_data[0]
        await bot.send_message(message.from_user.id,
                               text=f'–í–∞—à ID: {user["user_id"]}\n'
                                    f'Username: {user["username"]}\n'
                                    f'–ù–æ–º–µ—Ä –ó–∞—è–≤–ª–µ–Ω–∏—è: {user["reqNum"]}\n'
                                    f'–ü–∏–Ω-–ö–æ–¥: {user["pin"]}'
                               )

        return
    await bot.send_message(message.from_user.id,
                           text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')


@dp.message_handler(commands=['delete'])
async def process_delete_command(message: types.Message):
    user = message.from_user
    user_data = await delete_user(user=user)
    if user_data.deleted_count == 1:
        await bot.send_message(message.from_user.id,
                               text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '
                                    f'{user.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')

        return
    await bot.send_message(message.from_user.id,
                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '
                                f'{user.username} –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler()
async def process_unknown_command(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞')
    await message.delete()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
